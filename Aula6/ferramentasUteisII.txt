FERRAMENTAS UTEIS II - começa aos 08:25 min do vídeo

	A aula de hoje cobre mais algumas ferramentas de apoio que podemos utilizar enquanto estamos trabalhando em um repositório com git.
	
STASHING: Guardando para mais tarde
	Utilizado quando queremos salvar um conjunto de mudanças, mas não queremos fazer um commit para isso.
	As mudanças no stash são armazenadas em uma pilha.
	
	git stash -> retorna o HEAD ao estado do último commit, armazenando as mudanças em uma pilha. 
		Parâmetros (opcionais)
			-u 			 -> inclui não indexados, ou seja, os arquivos novos
			-m "<texto>" -> adiciona uma mensagem ao item dos stash

EXPLICAÇÃO: comportamenteo padrão -> adiciona todos os arquivos indexados ao stash. E o que são esses arquivos? São arquivos que já adicionamos em algum momento ao repositório. Então, se criamos um novo arquivo, ele ainda não está indexado.
Se usarmos o '-u' incluímos os arquivos não indexados.
Sem o '-m', cria uma mensagem padrão com o id e a mensagem do último commit.
O 'git stash' sem parâmetro retorna para o estado original, o que havia antes de fazer qualquer alteração. 

	git stash push -> possibilita especificar caminhos a serem adicionados ao stash
		Parâmetros (opcionais)
			os mesmos do git stash
			-- <pasta(s)/arquivo(s)>
	
		
	git stash pop -> aplica as mudanças de um item do stash nos arquivos atuais. Retira item da pilha.
	git stash apply -> aplica as mudanças de um item do stash nos arquivos atuais. Não retira item da pilha.
	PODE GERAR CONFLITOS
		Parâmetros (opcionais)
			<#stash> -> Nº do stash. Conforme vamos empilhando os itens, o stash cria um índice ao qual cada elemento da pilha recebe um nº, começando no 0, 1, 2, ...
			Assim, se quisermos retirar um item que não seja o último, precisamos especificar o nº do item que queremos retirar

EXPLICAÇÃO: comportamenteo padrão -> sem parâmetro nenhum, ele aplica as mudanças do último item. Pode gerar conflitos como o merge/rebase. Quando detecta conflitos no 'git stash pop' ele automaticamente segue o padrão do 'git stash apply' (joga as mudanças e não retira o último item)
	
	
	git stash list -> lista os itens no stash
	
	git stash show -> detalha as mudanças de um item específico no stash
		Parâmetros (opcionais)
			<# stash>	-> específica qual item queremos visualizar.
			-p			-> detalha no modo patch. Detalha o que foi alterado e cada linha alterada.
			
EXPLICAÇÃO: comportamenteo padrão -> sem parâmetro nenhum, detalha o último item.

	
	git stash drop -> remove um item do stash, sem aplicá-lo. Suponha que foi feita uma alteração, depois colocamos ela no stash e por fim não queremos mais essa alteração.
		Parâmetros (opcionais)
			<# stash>	-> específica qual item queremos remover.
	
EXPLICAÇÃO: comportamenteo padrão -> sem parâmetro nenhum, remove o último item. Se der algum conflito no 'git stash pop', após resolvermos os conflitos, usamos o comando 'git stash drop' no último item.


	git stash clear -> remove todos os itens do stash sem aplicar as mudanças.
	
RECOMENDAÇÃO: apagar os itens do stash quando não precisarmos usar mais, pois elas ficam na pasta oculta .git

NOTA: Com stash podemos mover as mudanças de uma branch para outra. Por exemplo, fizemos um git stash, vimos que estamos na branch errada, então devemos ir para a branch certa e por fim, nesta branch, usamos o comando 'git stash pop'




TAGGING: Adicionando marcações no históricos. 
IMPORTANTE: não podemos criar duas tags com mesmo nome.
	Utilizado quando queremos fazer marcações em pontos importantes no históricos.
	Substitui os parâmetros que pedem por um commit específico.
	Caso de uso comum: Numeração de versões.

			|v1|					|v2|
	(1)----->(2)---->(3)---->(4)---->(5)

	Se um commit tem uma tag associada, podemos usar a tag ao invés do id do commit. Verificar se tudo que podemos fazer com um id também pode ser feito com a tag.
	
	TAGS ANOTADAS -> possibilita adicionar mais informações as tags. Cria um mini arquivo de texto, ao qual podemos anotar do que se trata aquele commit.
	
	git tag <nome-da-tag> -> cria uma tag com o nome espedifícado.
		Parâmetros (obrigatórios)
			<nome-da-tag> -> cria uma tag no commit atual
		Parâmetros (opcionais)
			-a -> tag anotada
			-m -> texto. Envia o texto diretamente, como nos commits
			<commit-ID> -> ao invés de fazer uma tag no commit atual (HEAD), ele cria uma tag no commit especificado pelo id
			
NOTA: Se passarmos o comando só com '-a', ele vai entender que queremos uma tag anotada mas que não passamos a mensagem ainda, e por consequência, o editor de texto vim será aberto e teremos que fazer a mensagem por ele, salvar e depois disso a tag será criada. Se o texto estiver vazio, ele não cria a tag. 

NOTA: O '-a' é para criar um texto mais longo, diferente do '-m' que é para uma mensagem curta.

	git tag -l -> lista as tags do repositório
		Parâmetros (opcionais)
			<padrão-de-nome> -> se tivermos várias tags semelhantes (como v1, v2, v3, v3.1.0, e assim por diante), com o uso do padrão de nome mais um coringa (git tag -l v*) listaremos todas as tags semelhantes
			
	git tag -d <nome-da-tag1> <nome-da-tag2> ... -> deleta as tags do repositório. Pode deletar uma ou várias.
		Parâmetros (obrigatórios)
			tags a serem removidas
	
	git tag <nome-da-tag> -f <commit-ID> -> move uma tag para outro commit
		Parâmetros (obrigatórios)
			<nome-da-tag>
			<commit-ID>

NOTA: -f (force) -> é para forçar algo.
	
TAGS NO REMOTO
	O comportamento padrão do git push é enviar somente os commits ao remoto.
	Caso desejarmos adicionar as tags, também é necessário especificar ao comando para fazê-lo.
	
	COMPLEMENTANDO O GIT PUSH
	git push <nome-do-remoto> <tag> -> envia uma tag do repositório local ao repositório remoto
		Parâmetros (obrigatórios)
			<nome-do-remoto>
			<tag>
	
	git push <nome-do-remoto> branch --tags -> envia todas as tags presentes na branch especificada para o servidor remoto
	
	git push --delete <nome-do-remoto> <tag> -> remove a tag especificada no servidor remoto
	CUIDADO ao remover tags com o mesmo nome que branches! Pois pode ocorrer de haver uma tag e uma branch com mesmo nome e aí ele deletará a branch ao invés da tag.
	
ESPECIFICANDO QUE ESTAMOS REMOVENDO UMA TAG E NÃO UMA BRANCH	
	NOTA: podemos também passar 'git push --delete <nome-do-remoto> refs/' que resultará em 'refs/heads/main	refs/tags/<tag>
	'refs' -> é uma pasta da configuração do git que armazena todos os HEADS de todas as branches, e também tem referências para as tags, e assim vc específica que está removendo uma tag e não uma branch
	NOTA2: usei o comando 'git push --delete <nome-do-remoto> refs/' e ele resultou:
	
		Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
		$ git push --delete origin refs/
		fatal: invalid refspec ':refs/'
	
	entretanto, usei o 'git push --delete origin refs/tags/v1' e ele resultou:
		
		Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
		$ git push --delete origin refs/tags/v1
		To github.com:Josius/USPCLLGit.git
		- [deleted]         v1
	
	e este sim apagou a tag no repositório online
	