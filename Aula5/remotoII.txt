REMOTO II
								  (HEAD)		
	(1)---->(2)---->(3)---->(4)---->(5)---> ... --->(...)	(main)			- local
	
	(1)---->(2)---->(3)---->(4)---->(5)---> ... --->(...)	(origin/main)	- remoto
	
	O histórico padrão de commits do git é linear. Quando fazemos um 'git push' esse histórico é passado ao servidor remoto e é dessa forma que o git sabe quando nosso repositório local está alguns commits a frente ou atrás do repositório remoto.
	É possível criar ramificações (ou branches) nesse histórico, criando um ambiente que diverge da linha do tempo principal.
	
	(1)---->(2)---->(3)---->(4)---->(5)---> ... --->(...)	(main)
							  |
							  |
							  |
							  |	  (HEAD)
							   ---->(6)		(Nova Funcionalidade)

	
	
	
	branch
	- Cria uma cópia do histórico de mudanças a partir de um ponto (commit) específico.
	- Todas as modificações feitas dentro de uma branch são isoladas da linha do tempo principal.
	- A decisão de criar ou não uma branch é específica por situação. Cada pessoa/equipe costuma trabalhar de certa forma, seguindo diretrizes imposta ou pela pessoa ou pela empresa da equipe.
	- Assim que criamos uma branch, o nosso HEAD se movimenta.
	
	
	
	
LISTANDO BRANCHES	
	git branch -> lista, cria e deleta branches de acordo com parâmetros passados no comando. Seu comportamento padrão é listar todas as branches locais criadas.
		Parâmetros (opcionais)
			-l -> lista as branches (ao ser combinado com outros comandos, altera várias branches)
				Alternativa: --list
			
			-r -> somente remoto
			-a -> todas, inclusive remoto


EXEMPLOS:
................................................................................
Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch
* main

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch -l
* main

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch --list
* main

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch -lr
  origin/HEAD -> origin/main
  origin/main

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch -la
* main
  remotes/origin/HEAD -> origin/main
  remotes/origin/main

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch -a
* main
  remotes/origin/HEAD -> origin/main
  remotes/origin/main

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch -r
  origin/HEAD -> origin/main
  origin/main
................................................................................
	
	
	

CRIANDO UMA BRANCH	
	git branch <nome-da-branch> -> cria uma branch com nome especificado
		Parâmetros (opcionais)
			<commit-id>
			
			
EXEMPLOS:
................................................................................
Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch nova-funcionalidade

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch
* main
  nova-funcionalidade

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch nova-branch

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch
* main
  nova-branch
  nova-funcionalidade
................................................................................




RENOMEANDO UMA BRANCH
	git branch -m <branch-antiga> <novo-nome> -> renomeia uma branch. Muito cuidado ao renomear branches que já estão presentes no repositório remoto
				
			
EXEMPLOS:
................................................................................
Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch -m nova-branch nova-branch-com-outro-nome

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch
* main
  nova-branch-com-outro-nome
  nova-funcionalidade
................................................................................




DELETANDO UMA BRANCH
	git branch -d <nome-da-branch> -> deleta uma branch com o nome especificado. A branch precisa estar no histórico da branch original
		Parâmetros (opcionais)
			-f -> força a remoção (CUIDADO). Por padrão, o 'git branch -d' não deixa deletar  uma branch criada que não esteja no histórico original. Ou seja, se não foi feito o merge dessa branch, o git não permitirá remover. Para deletar é necessário forçar a remoção.
			
	BOAS PRÁTICAS: as branches normalmente são temporárias; então, quando tiver terminado de modificar tudo que precisava e enviado essas alterações para a branch original, é uma boa prática apagar a branch, pricipalmente se ela for local de muito curta. 
				
			
EXEMPLOS:
................................................................................
Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch -d nova-branch-com-outro-nome
Deleted branch nova-branch-com-outro-nome (was 41f6950).

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git branch -l
* main
  nova-funcionalidade
................................................................................




NAVEGANDO NO HISTÓRICO DA BRANCH
	git checkout <nome-da-branch> -> muda a posição do HEAD. Ou seja, troca pra outra branch.
		Parâmetros (obrigatórios)
			<nome-da-branch> 
			ou
			<commit-id> (CUIDADO). NÃO ENTENDI MUITO BEM, VERIFICAR DEPOIS DE OUTRA FONTE.
		Parâmetros (opcionais)	
			-b ->cria uma branch e realiza o checkout. NÃO FUCIONA com o nome de uma branch já criada.
			

EXEMPLOS:
................................................................................
Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git checkout nova-funcionalidade
Switched to branch 'nova-funcionalidade'

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (nova-funcionalidade)
$ git status
On branch nova-funcionalidade
nothing to commit, working tree clean

................................................................................
EXEMPLOS USANDO O '-b'
Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git checkout -b branch-conflito
Switched to a new branch 'branch-conflito'

Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (branch-conflito)
$ git status
On branch branch-conflito
................................................................................




MERGEANDO 
	Cria um novo commit que adiciona todas as mudanças de uma nova branch a branch antiga.
	Situação ideal: fast-foward -> acontece quando estamos trabalhando em outra branch (não a main) e ninguém faz alteração alguma no branch main, logo não ocorrerá conflitos.
	
	(3)---->(4)---->(5)---->(8)---> ... --->(...)
			  |				 |
			  |				 |
			  |				 |
			  |				 |	  
			   ---->(6)---->(7)




	git merge <nome-da-branch> -> tenta realizar um merge commit da branch espeficada para a branch atual. MUITO CUIDADO - PRESTAR ATENÇÃO EM QUAL BRANCH ATUAL ESTAMOS. 
		Parâmetros (obrigatórios)
			<nome-da-branch>
		Parâmetros (opcionais)
			--no-ff -> sem fastfoward -> não entendi, verificar depois, mas parece que é se não detectar alteração entre o branch main e outro branch, ele faz o commit indicando que é um commit de merge




RESOLVENDO CONFLITOS 
	Se acaso houver duas pessoas alterando o texto original, isso resultará em conflito. Para resolvê-lo é necessário corrigir manualmente. O git NÃO CORRIGIRÁ ESSES CONFLITOS. Pelo contrário, ele colocará e marcará as alterações ocorridas nas branchs e apontará no arquivo cada mudança efetuada por cada branch (no arquivo que foi tentado fazer a merge, que no caso, geralmente é o main).
	Para usar uma ferramenta gráfica para resolver os conflitos, é preciso instalar e configurar ela. No windows estou usando o Meld, logo:
	
	Meger Tool
		git config merge.tool Meld

EXEMPLO DE CONFLITO
...............................................................................	
Daiwa@Daiwa-PC MINGW64 ~/Documents/Git/USPCLLGit (main)
$ git merge branch-conflito
Auto-merging Aula5/testMerge.txt
CONFLICT (content): Merge conflict in Aula5/testMerge.txt
Automatic merge failed; fix conflicts and then commit the result.
...............................................................................	

PRECISA VERIFICAR E CORRIGIR CONFIGURAÇÃO DO MELD




REESCREVENDO O HISTÓRICO
	Realoca um conjunto de commits em outro ponto
	Mantém um histórico mais linear e mais legível
	Geralmente utilizado para integrar mudanças do Remoto para o Local

			  (6)****>(7)	(6)---->(7)---> ... --->(...)
			  *				 |
			  *				 |
			  *				 |
			  *				 |	  
	(3)---->(4)---->(5)---->(8)


NUNCA FAZER REBASING EM BRANCHES PÚBLICOS - pois pode impactar o restante das pessoas envolvidas
	
	
	
	
	git rebase <branch-destino> -> realoca os commits da branch atual para a branch-destino
		Parâmetros (obrigatórios)
			<nome-da-branch>
		Parâmetros (opcionais) 
			-i ou --interactive -> permite escolher quais commits do histórico vc quer passar de uma branch para outra. VERIFICAR COMO FUNCIONA.
	
OUTRA FORMA DE USAR O REBASING
	git rebase <branch-destino> <branch-origem> -> realoca os commits da branch-origem para a branch-origem
		Parâmetros (opcionais) 
			-i ou --interactive -> permite escolher quais commits do histórico vc quer passar de uma branch para outra. VERIFICAR COMO FUNCIONA.
	
	
EXPLICAÇÃO: Diferente do merge, ele faz o contrário. Ao invés de estarmos na branch main e 'mergear' o histórico de outra branch ($ git merge branch-conflito); nos precisamos estar na branch que contém o histórico que queremos e enviá-lo para a branch que queremos que receba o histórico.