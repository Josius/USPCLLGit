FERRAMENTAS ÚTEIS I

	VERIFICANDO O HISTÓRICO

NOTA: quando entrar no log/show do git, para sair, só apertar a letra 'q'

	git log -> detalha os commits em ordem cronológica
		Parâmetros (opcionais)
			--stat 				-> além da informações padrão, também exibe informações a respeito dos arquivos
			--oneline			-> resume as informações exibidas, imprime somente os 7 1ºs números do cód identificador mais a mensagem obrigatória
			-N (N =# commits)	-> visualiza somente a qtde N de commits; por exemplo, -3 apresenta somente os 3 últimos commits
			<pasta/arquivo>		-> podemos usar o nome/caminho de uma pasta para saber o log somente desse local

	$ git log:
................................................................................
commit 3af26a637e938f5970afb038587468f284f31c66 (HEAD -> main, origin/main, origin/HEAD) -> código identificador único de cada commit (Nome do commit)
Author: Josius <josius.amaro@gmail.com> 												 -> quem fez o commit
Date:   Fri Jan 22 10:30:05 2021 -0300													 -> quando o commit foi efetuado

    pqnas alterações																	 -> mensagem obrigatória do git commit -m "<mensagem>"
................................................................................			


	$ git log --stat:
................................................................................
commit 3af26a637e938f5970afb038587468f284f31c66 (HEAD -> main, origin/main, origin/HEAD)
Author: Josius <josius.amaro@gmail.com>
Date:   Fri Jan 22 10:30:05 2021 -0300

    pqnas alterações
																						abaixo vemos as informações a respeito dos arquivos
 Aula2/comandoBasicoGit.txt    |  2 +-												 	 -> qtde de alterações (subtrações e adições)
 Aula2/configuracaoInicial.txt | 11 +++++++----											 -> qtde de alterações (subtrações e adições)
 2 files changed, 8 insertions(+), 5 deletions(-)
................................................................................


	$ git log --oneline:
................................................................................
3af26a6 (HEAD -> main, origin/main, origin/HEAD) pqnas alterações
6352078 aula2Completa
ffdf7ba links sobre cmd e terminal
9824924 aula2
cee2267 aula2 32:00
557d2e2 aula2 30:40
3fdadc5 22:30 aula2
261b060 Update README.md
c1f0ca5 Initial commit
................................................................................


	$ git log Aula3
................................................................................
commit 17b32ee64d86d8102323ee49216d86cb6d5d0c4f (HEAD -> main, origin/main, origin/HEAD)
Author: Josius <josius.amaro@gmail.com>
Date:   Tue Feb 9 11:43:27 2021 -0300

    aula 3, em 05:20, explicando sobre o parâmetro <pasta/arquivo>
................................................................................

	

	
	git show -> mostra quais alterações foram feitas no último commit efetuado
		Parâmetros (opcionais)
			<commit SHA>		-> Mostra quais alterações foram feitas em um determinado commit pelo seu SHA (cód identificador)
			
			
			
	
REVERTENDO ALTERAÇÕES
	
Qualquer alteração que estiver no histórico pode ser desfeita inteira ou parcialmente.
Entretanto, quando publicamos as alterações no servidor remoto, já não podemos mais revertê-las. Isso funciona como um método de segurança, ao qual enviamos o arquivo ao servidor remoto e outra pessoa altera ele. Se desfizermos as alterações no servidor remoto, as alterações efetuadas por outra pessoa serão perdidas. Há um comando para alterar, porém ele é muito específico e de pouco uso. É melhor prestar atenção ao que é publicado no servidor do que tentar alterar seu conteúdo.




NOTA: Não entendi muito bem sobre o git reset/restore e o HEAD, preciso verificar outra fonte para entender

	git reset -> retorna o HEAD ao estado especificado - Pelo que entendi, se um arquivo estiver na staging area, com git reset, esse arquivo retorna para o working directory, entretanto, se houve alguma alteração no arquivo antes de enviá-lo para a staging area, essa alteração não é apagada; o arquivo simplesmente retorna da staging area para a working	area com as alterações efetuadas anteriormente.
		Parâmetros (opcionais)
			<commit SHA>		-> CUIDADO!!! -> VERIFICAR EM OUTRA FONTE!!!
			--soft				-> VERIFICAR EM OUTRA FONTE!!!

SOBRE O HEAD
http://marklodato.github.io/visual-git-guide/index-en.html			





Semelhante ao git reset, se já houver acontecido o commit, git restore não detectará nenhuma alteração

	git restore -> restaura os arquivos ao seu estado original
		Parâmetros (obrigatórios)
			arquivo/pasta(s) - no caso é o nome do arquivo/pasta, pode ser um ou mais arquivos/pastas
		Parâmetros (opcionais)
			--staged			-> 
			
		Coringas/Wildcards - Servem para criar um padrão de nome p/ os arquivos e adicionar eles todos de uma vez:
				'git add .' -> este wildcard é o mais comum, adiciona tudo, seja qlqr arquivo e/ou qlqr pasta e o que houver dentro da pasta também
				'git add <nome do arquivo>*' -> se houver mais de um arquivo com nomes semelhantes (arq1.txt, arq2.txt, arq3.txt, etc..), se usarmos esse wildcard com '*' no final (git add arq*), ele vai add todos os arquivos que começam com aquele nome especifícado antes do '*', e o que vêm depois não importa, somente o que for semelhante ao que estiver antes do '*'. 
				Também podemos usar o '*' no começo, como 'git add *.txt', que ele iria adicionar todos os arquivos '.txt'




	MANIPULANDO ARQUIVOS
	Sempre que estivermos em um repositório git é preferível utilizar os comandos do git, pois eles trabalham melhor no git. Por exemplo, temos um arquivo em um diretório git e movemos ele para outro diretório git usando o comando 'mv'. Pode ocorrer do git entender que movemos o arquivo ou que apagamos o arquivo e criamos um outro semelhante no outro diretório. Neste caso, o histórico do arquivo pode ser perdido, o que vem a ser péssimo. Logo, com o comando 'git mv' o histórico não é perdido.
	
	COMPARAÇÃO
	mv -> git mv
	ls -> git ls-files
	rm -> git rm
	
	
	
	
	IGNORANDO ARQUIVOS
	.gitignore -> arquivo de texto que contém uma lista de nomes que serão ignorados pelo git. Geralmente (mas não necessariamente) localizado na raiz do projeto; também podemos colocar um por pasta, o qual ignorará os arquivos de cada pasta ao qual ele se encontra. Podemos usar coringas para definir os nomes.
	